package com.company;

/**
 * Created by madhu on 6/11/16.
 */
import java.util.*;
import java.io.*;
import Jama.Matrix;

//Creating a class for Linear Regression 
//alpha is a coefficient whose value can be changed

public class L2RegLinearReg

{
    public Double alpha;
    public String trainFile;
    public String testFile;
    public void simpleLinearReg() {
        alpha = 0.5;
        trainFile = " ";
        testFile = " ";
    }
    
// Reads the matrix from the input file

    private Matrix CreateMatrix(String fileName) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            List<double[]> createArray = new ArrayList<double[]>();

            String line;
            while ((line = reader.readLine()) != null) {
                String pattern[] = line.split(",");
                double data[] = new double[pattern.length];
                for (int i = 0; i < pattern.length; ++i) {
                    data[i] = Double.parseDouble(pattern[i]);
                }
                createArray.add(data);
            }

            if (createArray.size() > 0) {
                int column = createArray.get(0).length;
                int row = createArray.size();
                Matrix matrix = new Matrix(row, column);
                for (int r = 0; r < row; r++) {
                    for (int c = 0; c < column; c++) {
                        matrix.set(r, c, createArray.get(r)[c]);
                    }
                }
                return matrix;
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }

        return new Matrix(0, 0);
    }

    // Target is the last column that is to be removed and 0 or 1 are added to the column of each row as bias

    private Matrix dataPointsObtain(Matrix dataGiven) {
        Matrix attributes = dataGiven.getMatrix(0, dataGiven.getRowDimension() - 1, 0, dataGiven.getColumnDimension() - 2);
        int row = attributes.getRowDimension();
        int column = attributes.getColumnDimension() + 1;
        Matrix modifiedAttributes = new Matrix(row, column);
        for (int r = 0; r < row; r++) {
            for (int c = 0; c < column; c++) {
                if (c == 0) {
                    modifiedAttributes.set(r, c, 1.0);
                } else {
                    modifiedAttributes.set(r, c, attributes.get(r, c-1));
                }
            }
        }
        return modifiedAttributes;
    }

    // Returns the last column values as they are the target and removed from the data given
    
    private Matrix obtainTarget(Matrix dataGiven) 
    {
        return dataGiven.getMatrix(0, dataGiven.getRowDimension() - 1, dataGiven.getColumnDimension() - 1, dataGiven.getColumnDimension() - 1);
    }

    // train the model with l2 regularizer 

    private Matrix trainModel(Matrix data, Matrix target, Double alpha) {
        int row = data.getRowDimension();
        int column = data.getColumnDimension();
        Matrix identity = Matrix.identity(column, column);
        identity.times(alpha);
        Matrix dataCopy = data.copy();
        Matrix transponseData = dataCopy.transpose();
        Matrix norm = transponseData.times(data);
        Matrix circular = norm.plus(identity);
        Matrix circularInverse = circular.inverse();
        Matrix former = circularInverse.times(data.transpose());
        Matrix giveWeight = former.times(target);

        return giveWeight;
    }
    
    //Test the model

    private double testLinearRegressionModel(Matrix data, Matrix target, Matrix giveWeights) {
        double error = 0.0;
        int row = data.getRowDimension();
        int column = data.getColumnDimension();
        assert row == target.getRowDimension();
        assert column == giveWeights.getColumnDimension();

        Matrix predictTarget = predict(data, giveWeights);
        for (int i = 0; i < row; i++) {
            error = (target.get(i, 0) - predictTarget.get(i, 0)) * (target.get(i, 0) - predictTarget.get(i, 0));
        }

        return 0.5 * error;
    }
    
    //Calculate the targets to be predicted based the weights deduced and known attributes

    private Matrix predict(Matrix data, Matrix giveWeights) {
        int row = data.getRowDimension();
        Matrix predictTarget = new Matrix(row, 1);
        for (int i = 0; i < row; i++) {
            double value = multiply(data.getMatrix(i, i, 0, data.getColumnDimension() -1 ), giveWeights);
            //System.out.println(value);
            predictTarget.set(i, 0, value);
        }
        return predictTarget;
    }
    
    //Matrix multiplication
    
    private Double multiply(Matrix data, Matrix giveWeights) {
        Double sum = 0.0;
        int column = data.getColumnDimension();
        for (int i = 0; i <column; i++) {
            sum += data.get(0, i) * giveWeights.get(i, 0);
        }
        return sum;
    }
    public static void main(String[] args) {
        simpleLinearReg rg = new simpleLinearReg();
        try {
            Matrix train = rg.CreateMatrix(rg.trainFile);
            Matrix test = rg.CreateMatrix(rg.testFile);

            /** get the actual attributes, meanwhile add a N*1 column vector with value being all 1 as the first column of the attributes */
            Matrix trainData = rg.dataPointsObtain(train);
            Matrix testData = rg.dataPointsObtain(test);

            Matrix trainTarget = rg.obtainTarget(train);
            Matrix testTarget = rg.obtainTarget(test);

            // Train the model.
            Matrix giveWeights = rg.trainModel(trainData, trainTarget, rg.alpha);
            for (int i = 0; i < giveWeights.getRowDimension(); i++) {
                System.out.println(giveWeights.get(i, 0));
            }
            
            //Test the model using given data
            
            double train_error = rg.testLinearRegressionModel(trainData, trainTarget, giveWeights);
            double test_error = rg.testLinearRegressionModel(testData, testTarget, giveWeights);

            System.out.println(train_error);
            System.out.println(test_error);
        }   catch (Exception e){
            e.printStackTrace();
            System.exit(1);
        }


    }

}
